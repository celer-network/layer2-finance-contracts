import { expect } from 'chai';
import hre, { ethers } from 'hardhat';

import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/dist/src/signer-with-address';

import { Registry__factory } from '../typechain';
import { MerkleUtils__factory } from '../typechain/factories/MerkleUtils__factory';
import { RollupChain__factory } from '../typechain/factories/RollupChain__factory';
import { TransitionEvaluator__factory } from '../typechain/factories/TransitionEvaluator__factory';
import { RollupChain } from '../typechain/RollupChain';

declare module 'mocha' {
  export interface Context {
    rollupChain: RollupChain;
    adminSigner: SignerWithAddress;
  }
}

describe('RollupChain', function () {
  beforeEach(async function () {
    const signers: SignerWithAddress[] = await hre.ethers.getSigners();
    this.adminSigner = signers[0];

    const merkleUtilsFactory = (await ethers.getContractFactory(
      'MerkleUtils'
    )) as MerkleUtils__factory;
    const merkleUtils = await merkleUtilsFactory.deploy();
    await merkleUtils.deployed();

    const registryFactory = (await ethers.getContractFactory(
      'Registry'
    )) as Registry__factory;
    const registry = await registryFactory.deploy();
    await registry.deployed();

    const transitionEvaluatorFactory = (await ethers.getContractFactory(
      'TransitionEvaluator'
    )) as TransitionEvaluator__factory;
    const transitionEvaluator = await transitionEvaluatorFactory.deploy(
      registry.address
    );
    await merkleUtils.deployed();

    const rollupChainFactory = (await ethers.getContractFactory(
      'RollupChain'
    )) as RollupChain__factory;
    this.rollupChain = await rollupChainFactory.deploy(
      0,
      0,
      transitionEvaluator.address,
      merkleUtils.address,
      registry.address,
      this.adminSigner.address
    );
    await this.rollupChain.deployed();
  });

  it('should commit block', async function () {
    // TODO: generate test data more programmatically
    const txs = [
      '0x000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000737461746520726f6f740000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000001020300000000000000000000000000000000000000000000000000000000000102030000000000000000000000000000000000000000000000000000000000010203',
      '0x000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000737461746520726f6f7400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000010203',
      '0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000737461746520726f6f7400000000000000000000000000000000000000000000000000000000000012340000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000102030000000000000000000000000000000000000000000000000000000000bc614e0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000d7468697320697320612073696700000000000000000000000000000000000000',
      '0x000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000737461746520726f6f740000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000102030000000000000000000000000000000000000000000000000000000000bc614e00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000d7468697320697320612073696700000000000000000000000000000000000000',
      '0x000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000737461746520726f6f740000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000102030000000000000000000000000000000000000000000000000000000000bc614e00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000d7468697320697320612073696700000000000000000000000000000000000000'
    ];
    expect(await this.rollupChain.commitBlock(txs)).not.throw;
    expect(await this.rollupChain.getCurrentBlockNumber()).to.equal(0); // 0-based indexing
  });
});
